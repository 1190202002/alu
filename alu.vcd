$date
	Thu Oct 21 18:46:18 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_ts $end
$var wire 1 ! Zero $end
$var wire 32 " F [31:0] $end
$var wire 1 # Cout $end
$var reg 32 $ A [31:0] $end
$var reg 32 % B [31:0] $end
$var reg 5 & Card [4:0] $end
$var reg 1 ' Cin $end
$scope module uut $end
$var wire 32 ( A [31:0] $end
$var wire 32 ) B [31:0] $end
$var wire 5 * Card [4:0] $end
$var wire 1 ' Cin $end
$var wire 1 # Cout $end
$var wire 32 + F [31:0] $end
$var wire 1 ! Zero $end
$var wire 32 , and_result [31:0] $end
$var wire 32 - anot_result [31:0] $end
$var wire 32 . dior_result [31:0] $end
$var wire 32 / isa_result [31:0] $end
$var wire 32 0 isb_result [31:0] $end
$var wire 32 1 nota_result [31:0] $end
$var wire 32 2 notb_result [31:0] $end
$var wire 32 3 or_result [31:0] $end
$var wire 32 4 saor_result [31:0] $end
$var wire 32 5 setz_result [31:0] $end
$var wire 32 6 subfc_result [31:0] $end
$var wire 32 7 subf_result [31:0] $end
$var wire 32 8 subc_result [31:0] $end
$var wire 32 9 sub_result [31:0] $end
$var wire 1 : cou6 $end
$var wire 1 ; cou5 $end
$var wire 1 < cou4 $end
$var wire 1 = cou3 $end
$var wire 1 > cou2 $end
$var wire 1 ? cou1 $end
$var wire 32 @ addc_result [31:0] $end
$var wire 32 A add_result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 A
b1 @
1?
1>
0=
0<
1;
1:
b11111111111111111111111111111110 9
b11111111111111111111111111111101 8
b10 7
b1 6
b0 5
b1 4
b11111111111111111111111111111111 3
b11111111111111111111111111111110 2
b0 1
b1 0
b11111111111111111111111111111111 /
b11111111111111111111111111111110 .
b11111111111111111111111111111110 -
b1 ,
b0 +
b1 *
b1 )
b11111111111111111111111111111111 (
1'
b1 &
b1 %
b11111111111111111111111111111111 $
1#
b0 "
1!
$end
#10000
b1 "
b1 +
0!
b10 &
b10 *
#20000
b11111111111111111111111111111110 "
b11111111111111111111111111111110 +
0#
b11 &
b11 *
#30000
b11111111111111111111111111111101 "
b11111111111111111111111111111101 +
b100 &
b100 *
#40000
b10 "
b10 +
1#
b101 &
b101 *
#50000
b1 "
b1 +
b110 &
b110 *
#60000
b11111111111111111111111111111111 "
b11111111111111111111111111111111 +
0#
b111 &
b111 *
#70000
b1 "
b1 +
b1000 &
b1000 *
#80000
b0 "
b0 +
1!
b1001 &
b1001 *
#90000
0!
b11111111111111111111111111111110 "
b11111111111111111111111111111110 +
b1010 &
b1010 *
#100000
b11111111111111111111111111111111 "
b11111111111111111111111111111111 +
b1011 &
b1011 *
#110000
b1 "
b1 +
b1100 &
b1100 *
#120000
b1101 &
b1101 *
#130000
b11111111111111111111111111111110 "
b11111111111111111111111111111110 +
b1110 &
b1110 *
#140000
b1111 &
b1111 *
#150000
b0 "
b0 +
1!
b10000 &
b10000 *
#160000
